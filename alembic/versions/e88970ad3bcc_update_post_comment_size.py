"""Update post Comment size

Revision ID: e88970ad3bcc
Revises: 718b836e4735
Create Date: 2024-08-03 12:20:02.507662

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e88970ad3bcc'
down_revision: Union[str, None] = '718b836e4735'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_comment_id', table_name='comment')
    op.drop_table('comment')
    op.drop_index('ix_app_user_id', table_name='app_user')
    op.drop_table('app_user')
    op.drop_index('ix_like_post_id', table_name='like_post')
    op.drop_table('like_post')
    op.drop_index('ix_post_id', table_name='post')
    op.drop_table('post')
    op.drop_index('ix_country_id', table_name='country')
    op.drop_table('country')
    op.drop_index('ix_category_id', table_name='category')
    op.drop_table('category')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('category',
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('category_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='category_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_category_id', 'category', ['id'], unique=False)
    op.create_table('country',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('country_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('phone', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('continent', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('continent_code', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('alpha3', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='country_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_country_id', 'country', ['id'], unique=False)
    op.create_table('post',
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('post_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('comment', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('path', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('is_published', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['category.id'], name='post_category_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['app_user.id'], name='post_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='post_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_post_id', 'post', ['id'], unique=False)
    op.create_table('like_post',
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('post_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_liked', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['post_id'], ['post.id'], name='like_post_post_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['app_user.id'], name='like_post_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='like_post_pkey')
    )
    op.create_index('ix_like_post_id', 'like_post', ['id'], unique=False)
    op.create_table('app_user',
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('app_user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('user_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('photo', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('country_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('phone_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_confirmed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('user_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('folder', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('code_confirmation', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('code_confirmation_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('country_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('token', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('refresh_token', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('remember_token', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('remember_token_expiry_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('refresh_token_expiry_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['country_id'], ['country.id'], name='app_user_country_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='app_user_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_app_user_id', 'app_user', ['id'], unique=False)
    op.create_table('comment',
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('comment_text', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('comment_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('post_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['post.id'], name='comment_post_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['app_user.id'], name='comment_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='comment_pkey')
    )
    op.create_index('ix_comment_id', 'comment', ['id'], unique=False)
    # ### end Alembic commands ###
